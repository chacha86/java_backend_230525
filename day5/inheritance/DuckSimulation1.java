package day5.inheritance;

public class DuckSimulation1 {
    public static void main(String[] args) {
        /* 가정
        우리는 게임개발회사에 입사했다.
        우리에게는 성격좋은 사수 한명이 있다.
        내가 개발할 게임은 오리시뮬레이션 게임이다.
        선임이 나의 개발을 도와주진 않지만 조언은 해준다.
        */

        오리 a오리 = new 오리();
        a오리.날다();  // 오리가 날개로 날아갑니다.
        a오리.헤엄치다(); // 오리발로 헤엄칩니다.

        청둥오리 a청둥오리 = new 청둥오리();
        a청둥오리.날다();
        a청둥오리.헤엄치다(); // 오리발로 헤엄칩니다.

        흰오리 a흰오리 = new 흰오리();
        a흰오리.날다();
        a흰오리.헤엄치다(); // 오리발로 헤엄칩니다.

        고무오리 a고무오리 = new 고무오리();
        a고무오리.날다();         // 출력 : 저는 날 수 없어요. ㅜㅠ
        a고무오리.헤엄치다(); // 둥둥 떠다닙니다.


        고무2오리 a고무2오리 = new 고무2오리();
        a고무2오리.날다();  // 출력 : 저는 날 수 없어요. ㅜㅠ
        a고무2오리.헤엄치다(); // 둥둥 떠다닙니다.


        아수라오리 a아수라오리 = new 아수라오리();
        a아수라오리.날다();  // 오리가 날개로 날아갑니다.
        a아수라오리.헤엄치다(); // 둥둥 떠다닙니다.

        /* 요구사항
        - D1 요구 : 오리를 생성하고 날게하시오.
        - D1 완료 : 클래스와 메서드를 만들어서 처리
        - D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
        - D2 완료 : 클래스와 메서드를 만들어서 처리
        - D3 요구 : 오리 계열의 클래스에 날다 메서드가 중복되었습니다. 중복을 제거해주세요.
        - D3 완료 : 상속을 사용해서 처리
        - D4 요구 : 게임의 재미를 위하여 고무오리를 추가하고 날게 하시오.
        - D4 완료 : 클래스와 메서드를 만들어서 처리
        - D5 요구 : 주말 주주회의에서 고무오리가 하늘을 날아다니는 것에 대해서 태클이 들어왔습니다. 고무오리 계열은 하늘을 날 수 없게 해주세요.
        - D5 완료 : 고무오리의 메서드를 새로 작성해서 해결
        - D6 요구 : 고무오리가 반응이 좋습니다. 고무2오리를 추가하고 날게 해주세요.
        - D6 완료 : 고무2오리 만들고 고무오리 상속으로 해결
        - D7 요구 : 모든 오리에게 헤엄치다 기능을 추가해주세요.
        - D7 완료 : 고무오리가 오리를 상속 받고 메서드 오버라이딩을 통해 해결
        - D8 요구 : 고무오리 계열이 헤엄치는 것도 말이 안된다. 고무오리는 둥둥 떠다니게 바꿔주세요.
        - D8 완료 : 고무오리의 헤엄치다 메서드를 재정의하여 해결
        - D9 요구 : 나는 건 날개로 날아가고, 헤엄은 둥둥 떠다니는 아수라오리를 만들어주세요.
        */

        // 오리시뮬레이션 상속 버전
        // 상속만 이용해서 중복을 제거하는 것은 한계가 있음.

        // 컴포지션(구성) -> 코드의 중복은 구성으로 해결해라.

    }
}

class 오리 {
    public void 날다() {
        System.out.println("오리가 날개로 날아갑니다.");
    }

    public void 헤엄치다() {
        System.out.println("오리발로 헤엄칩니다.");
    }
}


class 청둥오리 extends 오리 {

}

class 흰오리 extends 오리 {
}

class 고무오리 extends 오리 {

    // 부모가 물려준 메서드를 똑같은 이름으로 하나 더 만드는 것 -> 재정의(오버라이딩)
    public void 날다() {
        System.out.println("날 수 없어요.");
    }

    public void 헤엄치다() {
        System.out.println("둥둥 떠다닙니다.");
    }
}

class 고무2오리 extends 고무오리 {
}

class 아수라오리 extends 고무오리 {
    public void 날다() {
        System.out.println("오리가 날개로 날아갑니다.");
    }
}